[
  {
    "id": 1,
    "ppt": "Scrum Best Practices-slide-4",
    "title": "The Definition(s) of Done (DoD)",
    "content": [
      {
        "subTitle": "Agile emphasis",
        "subContent": [
          "deliver actual functionality",
          "Avoid waste Or: maximize work not done"
        ]
      },
      {
        "subTitle": "Strict definition of progress",
        "subContent": [
          "User stories: Delivered story points",
          "Tasks: work remaining in (ideal) working time"
        ]
      },
      {
        "subTitle": "Needed:",
        "subContent": [
          "Strict definition of Completion: Definition of Done: For user stories and sprint tasks"
        ]
      },
      {
        "subTitle": "Each team creates its own definitions",
        "subContent": []
      },
      {
        "subTitle": "Important: Apply Definition of Done consistently",
        "subContent": []
      }
    ],
    "image": []
  },
  {
    "id": 2,
    "ppt": "Scrum Best Practices-slide-5",
    "title": "Definition of Done (Tasks) ‚Äì Sample Check List",
    "content": [
      {
        "subTitle": "Did you build the thing right?",
        "subContent": [
          "Code checked into repository (Github)",
          "Code reviewed for standards compliance",
          "Code reviewed by team member or Walk-through performed",
          "External/Public API documented",
          "Unit test definition complete",
          "Unit tests run without error",
          "Non-functional tests (e.g. usability, performance) passed",
          "Regression tests run without error",
          "Static code analysis performed and passed",
          "Test coverage measured and achieved"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 3,
    "ppt": "Scrum Best Practices-slide-6",
    "title": "Acceptance Criteria (1)",
    "content": [
      {
        "subTitle": "Did you build the right thing?(from user/customer perspective)",
        "subContent": []
      },
      {
        "subTitle": "Acceptance Criteria",
        "subContent": [
          "Objective criteria to determine whether a user story has been fully and correctly implemented",
          "Basis for functional testing of completed user stories",
          "Basis for acceptance test before product release",
          "Detailed requirements",
          "Basis for BDD/ATDD: ",
          "BDD: Behavior Driven Development",
          "ATDD: Acceptance Test Driven Development"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 4,
    "ppt": "Scrum Best Practices-slide-7",
    "title": "Acceptance Criteria (2)",
    "content": [
      {
        "subTitle": "User stories in Product Backlog",
        "subContent": [
          "User story: an invitation for a conversation",
          "Product backlog: a wish list, shopping list,Anyone can add to it"
        ]
      },
      {
        "subTitle": "User stories in Sprint Backlog",
        "subContent": [
          "User story: high-level description of required functionality",
          "Sprint backlog: team commitment to deliver software that satisfies the requirements"
        ]
      },
      {
        "subTitle": "Acceptance criteria",
        "subContent": [
          "How to test that the delivered software satisfies a requirement"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 5,
    "ppt": "Scrum Best Practices-slide-8",
    "title": "Acceptance Criteria (3)",
    "content": [
      {
        "subTitle": "Sprint Planning",
        "subContent": []
      },
      {
        "subTitle": "For each user story in Sprint backlog",
        "subContent": [
          "Conversation of Product Owner with team",
          "Work out details of user story",
          "Agree on acceptance criteria"
        ]
      },
      {
        "subTitle": "Record acceptance criteria for each user story",
        "subContent": ["E.g. on back of card/post-it for user story"]
      },
      {
        "subTitle": "User story: View  ‚Äúmiles",
        "subContent": [
          "As a frequent flier, I want to see my current ‚Äúmiles‚Äù, so that I can plan for free tickets."
        ]
      },
      {
        "subTitle": "Acceptance Criteria: View ‚Äúmiles‚Äù",
        "subContent": [
          "View earned miles as of last statement",
          " View pending miles (since last statement)",
          "View total miles (earned + pending)",
          "View miles within 30 days of expiration"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 6,
    "ppt": "Scrum Best Practices-slide-9",
    "title": "Definition of Done (User Story) ‚Äì Sample Check List",
    "content": [
      {
        "subTitle": "Did you build the right thing?(from user perspective)",
        "subContent": [
          "All tasks for user story are done",
          "Tests performed and passed for all acceptance criteria",
          "User documentation/Help functions complete",
          "Inspected and accepted by Product Owner"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 7,
    "ppt": "Scrum Best Practices-slide-10",
    "title": "Team Working Agreements",
    "content": [
      {
        "subTitle": "Logistics",
        "subContent": [
          "Work room",
          "Meeting times",
          "Project repository: Location&&Organization",
          "Communication channels"
        ]
      },
      {
        "subTitle": "Development environment",
        "subContent": ["Platform", "IDE", "Coding style/standards"]
      },
      {
        "subTitle": "Work (Process) Patterns",
        "subContent": [
          "Definition(s) of Done",
          "Team collaboration",
          "Collaboration with experts",
          "(SME: subject matter experts)",
          "Areas of responsibility",
          "Work hand-off/integration"
        ]
      },
      {
        "subTitle": "Product Design Patterns",
        "subContent": [
          "UX/UI look and feel",
          "Product architecture",
          "Common approach to common problems",
          "Error handling"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 8,
    "ppt": "Scrum Best Practices-slide-11",
    "title": "Avoid Waste: Hidden Cost of Defects",
    "content": [
      {
        "subTitle": "Leaving problems unresolved increases risk of failure",
        "subContent": [
          "Defect build up: risk of extra cost (effort, time, money)",
          "Technical debt: steep interest rate; may be hard to pay off"
        ]
      },
      {
        "subTitle": "Minimize time between defect insertion and defect detection and correction",
        "subContent": ["Cost increases exponentially with time elapsed"]
      }
    ],
    "image": [
      {
        "url": "/1.png"
      }
    ]
  },
  {
    "id": 9,
    "ppt": "Scrum Best Practices-slide-12",
    "title": "Higher Quality ü°™ Faster Development",
    "content": [
      {
        "subTitle": "Eliminating more defects earlier makes progress faster",
        "subContent": [
          "Reduces effort, schedule, cost",
          "Up to a point (about 95%)"
        ]
      }
    ],
    "image": [
      {
        "url": "/2.png"
      }
    ]
  },
  {
    "id": 10,
    "ppt": "Scrum Best Practices-slide-13",
    "title": "Product Increment Strategies",
    "content": [
      {
        "subTitle": "Layer by layer  or Slice by slice ???",
        "subContent": []
      },
      {
        "subTitle": "Conventional approach (not necessarily wrong)",
        "subContent": [
          "Layer by layer Example: Making a pizza",
          "Make the dough",
          "Spread on tomato sauce",
          "Add vegetables",
          "Add meats",
          "Bake",
          "Sprinkle on extra cheese and/or hot pepper flakes"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 11,
    "ppt": "Scrum Best Practices-slide-14",
    "title": "Slices and Layers",
    "content": [],
    "image": [
      {
        "url": "/3.png"
      }
    ]
  },
  {
    "id": 11,
    "ppt": "Scrum Best Practices-slide-15",
    "title": "Product Increments: Vertical Slices",
    "content": [
      {
        "subTitle": "Start with",
        "subContent": [
          "Releasable system",
          "Minimal functionality:",
          "Establishes feasibility",
          "Gives a first taste"
        ]
      },
      {
        "subTitle": "Add increments",
        "subContent": [
          "Releasable system",
          "Increased functionality",
          "All layers expand as needed"
        ]
      },
      {
        "subTitle": "Vertical slice (‚ÄúSashimi‚Äù) increments",
        "subContent": ["practice essential to successful Scrum projects"]
      }
    ],
    "image": []
  },
  {
    "id": 12,
    "ppt": "Scrum Best Practices-slide-16",
    "title": "Splitting User Stories",
    "content": [
      {
        "subTitle": "User stories need to fit within sprint",
        "subContent": [
          "All work for a user story completed within single sprint"
        ]
      },
      {
        "subTitle": "Guideline (Rule of Thumb):",
        "subContent": [
          "‚Äúsize‚Äù of user story no more than 50% of sprint Because our estimates are easily off by factor of 2"
        ]
      },
      {
        "subTitle": "What to do with large user stories, epics? ",
        "subContent": ["Decompose into multiple stories"]
      }
    ],
    "image": []
  },
  {
    "id": 13,
    "ppt": "Scrum Best Practices-slide-17",
    "title": "Split User Stories by Workflow",
    "content": [
      {
        "subTitle": "Example: banking application",
        "subContent": ["Create an account"]
      },
      {
        "subTitle": "Split user story by user‚Äôs workflow ",
        "subContent": [
          "Supply personal data",
          "Choose account type",
          "Specify account options (e.g., overdraft protection)"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 14,
    "ppt": "Scrum Best Practices-slide-18",
    "title": "Split User Stories by Type/Alternative",
    "content": [
      {
        "subTitle": "Example: banking application",
        "subContent": ["Create an account"]
      },
      {
        "subTitle": "Split user story by user‚Äôs alternatives",
        "subContent": ["Checking account", "Savings account", "Line of credit"]
      }
    ],
    "image": []
  },
  {
    "id": 15,
    "ppt": "Scrum Best Practices-slide-19",
    "title": "Split User Stories by Type/Alternative",
    "content": [
      {
        "subTitle": "Example: banking application",
        "subContent": ["Create an account"]
      },
      {
        "subTitle": "Split user story by user object life cycle activities",
        "subContent": ["Create account", "Make deposit", "Withdraw money"]
      },
      {
        "subTitle": "General pattern: CRUD",
        "subContent": ["Create", "Read", "Update", "delete"]
      }
    ],
    "image": []
  },
  {
    "id": 16,
    "ppt": "Scrum Best Practices-slide-20",
    "title": "Split User Stories by Convenience Level ",
    "content": [
      {
        "subTitle": "Example: banking application",
        "subContent": ["Create an account"]
      },
      {
        "subTitle": "Split user story by user convenience level",
        "subContent": [
          "Enter data without/with autofill",
          "Type in data vs. select from menu",
          "Basic UI vs. ‚Äúcool‚Äù UI",
          "Manual vs. automation, e.g. decision making"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 17,
    "ppt": "Scrum Best Practices-slide-21",
    "title": "Split User Stories by Typicality ",
    "content": [
      {
        "subTitle": "Example: banking application",
        "subContent": ["Create an account"]
      },
      {
        "subTitle": "Split user story by typical vs. less typical user behavior/choice",
        "subContent": [
          "Type of user: novice; occasional; expert",
          "Single account owner vs. shared account"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 18,
    "ppt": "Scrum Best Practices-slide-22",
    "title": "Split User Stories by Base/Extension ",
    "content": [
      {
        "subTitle": "Example: banking application",
        "subContent": ["Travel application"]
      },
      {
        "subTitle": "Split user story by base case(s) vs. extended case(s)        ",
        "subContent": [
          "-Base cases: ",
          "book flight",
          "Rent car",
          "Book hotel",
          "-Extended cases:",
          "Book flight and rent car",
          "Book flight and book hotel",
          "Rent car and book hotel",
          "Book flight,rent car,and book hotel"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 19,
    "ppt": "Scrum Best Practices-slide-23",
    "title": "Split User Stories:  What Not to Do",
    "content": [
      {
        "subTitle": "Guiding principle:",
        "subContent": [
          "Each user story describes something of value to the user"
        ]
      },
      {
        "subTitle": "Anti-Patterns for Splitting User Stories (avoid)",
        "subContent": [
          "Split by architecture component: Front end vs. backend, UI vs. ‚Äúinternal processing‚Äù",
          "Split by function vs. other critical qualities Security (non-encrypted passwords): Data protection (user permissions based on user roles)"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 20,
    "ppt": "Scrum Best Practices-slide-24",
    "title": "More Tips for Effective Scrum",
    "content": [
      {
        "subTitle": "Have a defined team room",
        "subContent": []
      },
      {
        "subTitle": "Have Stand-up meeting at the same time and place every time, preferably in the team room  ",
        "subContent": [
          "Makes regular updating of Scrum Board and Burn chart more likely"
        ]
      },
      {
        "subTitle": "Enforce working agreements",
        "subContent": ["Meeting attendance, task status updating, ‚Ä¶"]
      },
      {
        "subTitle": "Post the Three Questions in BIG LETTERS ",
        "subContent": [
          "Scrum Master should listen for impediments and issues needing follow-up (not ask the three questions)"
        ]
      },
      {
        "subTitle": "If you use Scrum project management software, use a Scrum Board to track progress anyway.",
        "subContent": []
      }
    ],
    "image": []
  },
  {
    "id": 21,
    "ppt": "Scrum Best Practices-slide-25",
    "title": "Agile Myths and Scrum Smells and Plagues",
    "content": [
      {
        "subTitle": "Understanding problems when first using Scrum",
        "subContent": [
          "As a beginning practitioner of Scrum",
          "I need to understand what can go wrong when a team is new to Scrum",
          "So I can identify and remove obstacles to successful Scrum adoption"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 22,
    "ppt": "Scrum Best Practices-slide-26",
    "title": "Common Agile Myths (really: Misunderstandings)  ",
    "content": [
      {
        "subTitle": "",
        "subContent": []
      }
    ],
    "image": []
  },
  {
    "id": 23,
    "ppt": "Scrum Best Practices-slide-27",
    "title": "What are Scrum Smells?",
    "content": [
      {
        "subTitle": "‚ÄúWhiffs‚Äù, odors that may not seem so bad at first but over time become overwhelming (so you must get rid of them) ",
        "subContent": []
      },
      {
        "subTitle": "Easy to ignore at first;better get rid of it right away.",
        "subContent": []
      },
      {
        "subTitle": "Ignore scrum smells at your own peril!",
        "subContent": []
      }
    ],
    "image": []
  },
  {
    "id": 24,
    "ppt": "Scrum Best Practices-slide-28",
    "title": "Common Scrum Smells",
    "content": [
      {
        "subTitle": "Zero or > 1 Product Owners",
        "subContent": []
      },
      {
        "subTitle": "The Scrum Task Master",
        "subContent": [
          "As opposed to Scrum Master: coach,  mentor, facilitator, protector"
        ]
      },
      {
        "subTitle": "Commitment Phobia",
        "subContent": []
      },
      {
        "subTitle": "Self-unmanaged teams",
        "subContent": []
      },
      {
        "subTitle": "Burn-ups/downs that don‚Äôt",
        "subContent": []
      },
      {
        "subTitle": "Urgent things crowd out important things",
        "subContent": []
      }
    ],
    "image": []
  },
  {
    "id": 25,
    "ppt": "Scrum Best Practices-slide-29",
    "title": "Important/Urgent: Covey‚Äôs Quadrant",
    "content": [
      {
        "subTitle": "Important:",
        "subContent": ["contributes to achievement of (important) goals "]
      },
      {
        "subTitle": "Urgent:",
        "subContent": ["requires immediate attention"]
      },
      {
        "subTitle": "Commitment Phobia",
        "subContent": []
      },
      {
        "subTitle": "Examples for Quadrants",
        "subContent": [
          "Q1: Finish homework before deadline",
          "Q2: Improve programming skills",
          "Q3: Answering phone",
          "Q4: Playing video game"
        ]
      }
    ],
    "image": [
      {
        "url": "/4.png"
      }
    ]
  },
  {
    "id": 26,
    "ppt": "Scrum Best Practices-slide-31",
    "title": "Engineering Product and Process",
    "content": [
      {
        "subTitle": "Start with a coherent vision and a realistic plan",
        "subContent": ["Begin with the end in mind"]
      },
      {
        "subTitle": "Continuous improvement",
        "subContent": ["Requires measures for process and product"]
      },
      {
        "subTitle": "Focus on quality to increase productivity",
        "subContent": [
          "If now is not the time to do it right, when will you find the time to do it again"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 27,
    "ppt": "Scrum Best Practices-slide-32",
    "title": "Avoid Flaccid Scrum ",
    "content": [
      {
        "subTitle": "Flaccid Scrum (Martin Fowler)",
        "subContent": [
          "Scrum project management practices",
          "Without technic software engineering practices"
        ]
      },
      {
        "subTitle": "Leads to inferior software quality ‚Ä¶",
        "subContent": ["Technical debt build-up ‚Ä¶"]
      },
      {
        "subTitle": "and diminishing productivity",
        "subContent": ["will slow team over time"]
      }
    ],
    "image": []
  },
  {
    "id": 28,
    "ppt": "Scrum Best Practices-slide-33",
    "title": "Technical Practices within Scrum",
    "content": [
      {
        "subTitle": "Flaccid Scrum (Martin Fowler)",
        "subContent": [
          "Scrum project management practices",
          "Without technic software engineering practices"
        ]
      },
      {
        "subTitle": "Many borrowed from XP (eXtreme Programming)",
        "subContent": [
          "Done Criteria",
          "Peer review / Pair Programming",
          "Clean code",
          "TFD (test-first development)/TDD (test-driven development)",
          "Continuous integration",
          "Version Control",
          "Test coverage criteria",
          "Static Analysis Tools"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 29,
    "ppt": "Scrum Best Practices-slide-34",
    "title": "There Is No ‚ÄúI‚Äù in TEAM",
    "content": [
      {
        "subTitle": "Shared product vision",
        "subContent": ["Team members need to share a common product vision"]
      },
      {
        "subTitle": "Consensus",
        "subContent": [
          "Product/Release backlog",
          "Sprint goal and backlog ",
          "Level of effort estimation :1.User stories in story points 2. Sprint tasks in ideal working hours"
        ]
      },
      {
        "subTitle": "Joint responsibility",
        "subContent": [
          "Release plan",
          "Sprint plan",
          "Sprint report",
          "Scrum practices (stand-up, planning meetings, sprint post mortem)"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 30,
    "ppt": "Scrum Best Practices-slide-35",
    "title": "There is nothing but ‚ÄúI‚Äùs in TEAM",
    "content": [
      {
        "subTitle": "‚ÄúIt‚Äôs not my job‚Äù ",
        "subContent": [
          "Only if that job is already done or being done by somebody else"
        ]
      },
      {
        "subTitle": "Each team member responsible for reaching team goal",
        "subContent": [
          "Proactive in committing to tasks",
          "Diligent in completing tasks committed to",
          "Willing to ask for and accept help when needed",
          "Willing to offer and provide help when needed"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 31,
    "ppt": "Scrum Best Practices-slide-36",
    "title": "The four agreements of the Toltec way of life  ",
    "content": [
      {
        "subTitle": "Be impeccable with your word.",
        "subContent": []
      },
      {
        "subTitle": "Don‚Äôt take anything personally. ",
        "subContent": []
      },
      {
        "subTitle": "Don‚Äôt make assumptions",
        "subContent": []
      },
      {
        "subTitle": "Always do your best",
        "subContent": []
      }
    ],
    "image": []
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-8",
    "title": "What is Clean Code?",
    "content": [],
    "image": [
      {
        "url": "/5.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-9",
    "title": "why Clean Code?",
    "content": [],
    "image": [
      {
        "url": "/6.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-10",
    "title": "Getting to Clean Code",
    "content": [],
    "image": [
      {
        "url": "/7.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-11",
    "title": "Team Working Agreements",
    "content": [
      {
        "subTitle": "Definition of Done",
        "subContent": []
      },
      {
        "subTitle": "Acceptance Criteria",
        "subContent": []
      },
      {
        "subTitle": "Coding Standard/Style guide",
        "subContent": []
      }
    ],
    "image": []
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-12",
    "title": "Coding Standard",
    "content": [],
    "image": [
      {
        "url": "/8.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-13",
    "title": "Criteria for Good Coding Standard",
    "content": [
      {
        "subTitle": "Clarifies rather than obfuscates",
        "subContent": []
      },
      {
        "subTitle": "Makes programs read naturally",
        "subContent": []
      },
      {
        "subTitle": "Encourages best coding practices",
        "subContent": [
          "Ease of reading and understanding is more important than ease of writing/‚Äùclever coding‚Äù"
        ]
      },
      {
        "subTitle": "Promotes intention-revealing code",
        "subContent": ["Names"]
      }
    ],
    "image": []
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-14",
    "title": "Some Clean Code Heuristics",
    "content": [],
    "image": [
      {
        "url": "/9.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-15",
    "title": "No Duplication (DRY: Don‚Äôt Repeat Yourself) (1)",
    "content": [
      {
        "subTitle": "Refactor code, e.g.abstract common code block into separate function(method)",
        "subContent": []
      },
      {
        "subTitle": "Two separate implementations: ",
        "subContent": ["duplicates semantics of empty collection"]
      },
      {
        "subTitle": "makes dependency explicit",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-18",
    "title": "Replace magic numbers with named constants",
    "content": [
      {
        "subTitle": "Use meaningful constant names instead of constant literals",
        "subContent": []
      },
      {
        "subTitle": "Use meaningful variable names instead of generic names",
        "subContent": []
      },
      {
        "subTitle": "Encapsulate Expressions in Boundary Conditions",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-21",
    "title": "Programming by Intention",
    "content": [
      {
        "subTitle": "Break up long method by abstracting pieces into separate functions (methods)",
        "subContent": []
      },
      {
        "subTitle": "Makes code understandable at a higher level of abstraction",
        "subContent": []
      },
      {
        "subTitle": "Clear context for variables: attributes of new class",
        "subContent": []
      },
      {
        "subTitle": "New method names capture key semantics in application-specific terms",
        "subContent": []
      },
      {
        "subTitle": "Definition of new abstractions",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-27",
    "title": "Routine/Function/Procedure/Method Names",
    "content": [
      {
        "subTitle": "Aim for high cohesion and loose coupling",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/11.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-28",
    "title": "Managing Complexity",
    "content": [
      {
        "subTitle": "High Cohesion",
        "subContent": [
          "Components of a composite entity (class, object)",
          "Have high cohesion",
          "If the components tend to occur together in most contexts"
        ]
      },
      {
        "subTitle": "Loose Coupling",
        "subContent": [
          "Components are loosely coupled",
          "If there are few dependencies between the components"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-29",
    "title": "Loop Indices",
    "content": [
      {
        "subTitle": "Names of loop indices/bounds convey meaning of structural significance of index",
        "subContent": [
          "In simple loops, single-letter loop index may be acceptable."
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-30",
    "title": "Layout Affects Readability",
    "content": [
      {
        "subTitle": "Coding standards/style guides typically address use of white space(indentation), placement of parenthesis, ...",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/12.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-31",
    "title": "Vertical Separation",
    "content": [
      {
        "subTitle": "Minimize",
        "subContent": [
          "demands on reader‚Äôs memory",
          "Time spent browsing through the code"
        ]
      }
    ],
    "image": [
      {
        "url": "/13.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-37",
    "title": "What is Simple Design?",
    "content": [
      {
        "subTitle": "Create a table with four columns:",
        "subContent": [
          "All tests must pass",
          "No code is duplicated",
          "Code is self-explanatory",
          "No superfluous parts exist"
        ]
      },
      {
        "subTitle": "Sort your collected criteria into these columns:",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-38",
    "title": "Four Rules of Simple Design",
    "content": [
      {
        "subTitle": "All tests must pass",
        "subContent": [
          "Tests are written before code to be tested",
          "If all tests pass then code is ‚Äúcorrect‚Äù"
        ]
      },
      {
        "subTitle": "Code contains no duplication (DRY)",
        "subContent": ["Duplicated code/concepts suggest abstraction"]
      },
      {
        "subTitle": "Code is self-explanatory",
        "subContent": [
          "Code reveals intent",
          "Well-chosen names critical,Often reflect application domain concepts"
        ]
      },
      {
        "subTitle": "No superfluous parts",
        "subContent": [
          "Minimal number of classes and methods",
          "No extraneous/legacy parts"
        ]
      }
    ],
    "image": [
      {
        "url": "/14.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-39",
    "title": "Simple Design Feedback Cycle",
    "content": [
      {
        "subTitle": "Finding meaningful names",
        "subContent": ["Involves decomposition(s)", "Exposes new abstractions"]
      },
      {
        "subTitle": "Name stages",
        "subContent": [
          "Choose any name",
          "Find accurate name",
          "Find precise name",
          "Find meaningful name(s)"
        ]
      }
    ],
    "image": [
      {
        "url": "/15.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-40 ",
    "title": "The Design Dilemma",
    "content": [
      {
        "subTitle": "BDUF: Big Design Up Front",
        "subContent": ["Frowned upon by Agile folk"]
      }
    ],
    "image": [
      {
        "url": "/16.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-41 ",
    "title": "Emerging Design",
    "content": [
      {
        "subTitle": "Emerging design:",
        "subContent": ["design (pattern) discovery"]
      },
      {
        "subTitle": "Design patterns:",
        "subContent": ["records of other people‚Äôs discoveries"]
      }
    ],
    "image": [
      {
        "url": "/17.png"
      },
      {
        "url": "/18.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-42 ",
    "title": "The Telephone Test",
    "content": [],
    "image": [
      {
        "url": "/19.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-43 ",
    "title": "Really Meaningful Names",
    "content": [],
    "image": [
      {
        "url": "/20.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-44 ",
    "title": "Grow Code with Tests",
    "content": [],
    "image": [
      {
        "url": "/21.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-45 ",
    "title": "Hard-to-Test Code is ...",
    "content": [],
    "image": [
      {
        "url": "/22.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-48 ",
    "title": "Unexpected Changes and Working Software",
    "content": [],
    "image": [
      {
        "url": "/23.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-49 ",
    "title": "Test-Driven Development (TDD)",
    "content": [],
    "image": [
      {
        "url": "/24.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-50 ",
    "title": "Three Laws of Test-Driven Development",
    "content": [],
    "image": [
      {
        "url": "/25.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-51 ",
    "title": "Desirable Test Characteristics (F.I.R.S.T.)",
    "content": [
      {
        "subTitle": "Fast",
        "subContent": [
          "tests will run frequently",
          "Small and simple: test one concept at a time"
        ]
      },
      {
        "subTitle": "Independent",
        "subContent": [
          "No dependencies between tests",
          "Tests can run in any order",
          "Simplifies failure analysis (debugging)"
        ]
      },
      {
        "subTitle": "Repeatable",
        "subContent": ["Tests can run at any time in any order"]
      },
      {
        "subTitle": "Self-Validating",
        "subContent": ["Test either pass or fail (Boolean result)"]
      },
      {
        "subTitle": "Timely",
        "subContent": [
          "Write the tests when you need them",
          "In TDD: write test first then code"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-52 ",
    "title": "Clean Tests",
    "content": [
      {
        "subTitle": "Test code is code, too.",
        "subContent": []
      },
      {
        "subTitle": "Test code requires same care as production code",
        "subContent": [
          "Readable",
          "Understandable",
          "Self-explanatory; clear intent"
        ]
      },
      {
        "subTitle": "Dirty test code",
        "subContent": [
          "Same, or worse than, no tests",
          "Ill-structured tests increasingly harder to change and grow"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Clean Code and Simple Design-slide-53 ",
    "title": "Acceptance TDD",
    "content": [
      {
        "subTitle": "The code for passing an acceptance test",
        "subContent": [
          "(for a single acceptance criterion)\n        is built incrementally based on several unit tests"
        ]
      },
      {
        "subTitle": "Acceptance TDD also known as Behavior Driven Dev (BDD)",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/26.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Design Principles-slide-3 ",
    "title": "The SOLID Design Principles",
    "content": [
      {
        "subTitle": "SRP:",
        "subContent": ["the single responsibility principle"]
      },
      {
        "subTitle": "OCP:",
        "subContent": ["the open/closed principle"]
      },
      {
        "subTitle": "LSP:",
        "subContent": ["the Liskov substitution principle"]
      },
      {
        "subTitle": "ISP:",
        "subContent": ["the interface segregation principle"]
      },
      {
        "subTitle": "DIP:",
        "subContent": ["the dependency inversion principle"]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Design Principles-slide-4 ",
    "title": "SRP: Single Responsibility Principle\nA class should have only one reason to change.",
    "content": [
      {
        "subTitle": "Adapted from the notion of component cohesion:",
        "subContent": [
          "\"The elements of a component/module should be functionally\n        related\""
        ]
      },
      {
        "subTitle": "\"Each responsibility (group of related functional elements)\n        may be a source of change.\"",
        "subContent": []
      },
      {
        "subTitle": "Multiple responsibilities->",
        "subContent": ["multiple reasons for change"]
      },
      {
        "subTitle": "Coupling of responsibilities",
        "subContent": ["fragile designs"]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Design Principles-slide-5 ",
    "title": "SRP: Example (1)",
    "content": [
      {
        "subTitle": "Rectangle",
        "subContent": [
          "Geometric computation responsibility: area()",
          "Graphical application responsibility: draw()"
        ]
      },
      {
        "subTitle": "Design violates SRP",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/27.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Design Principles-slide-6 ",
    "title": "SRP: Example (2)",
    "content": [
      {
        "subTitle": "Geometric computation and graphical rendering separated",
        "subContent": ["Both can be used independently from each other"]
      },
      {
        "subTitle": "Design conforms to SRP",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/28.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Design Principles-slide-7 ",
    "title": "SRP: Modem Example (1)",
    "content": [
      {
        "subTitle": "Two responsibilities",
        "subContent": [
          "Connection: Dial(), Hangup()",
          "Data transfer: Send(), Recv()"
        ]
      },
      {
        "subTitle": "SRP violated",
        "subContent": []
      },
      {
        "subTitle": "Should responsibilities be separated?",
        "subContent": [
          "If connection interface changes ,classes using data transfer interface have to be recompiled"
        ]
      },
      {
        "subTitle": "When this happens (or there is good reason to expect this to happen) then separate responsibilities",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/29.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Design Principles-slide-8 ",
    "title": "SRP: Modem Example (2)",
    "content": [
      {
        "subTitle": "Separate responsibilities (axes of change)",
        "subContent": ["If/when they become axes of change"]
      },
      {
        "subTitle": "\"Components depending on Data Channel interface\n        now independent of components depending on Connection interface\"",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/30.png"
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Design Principles-slide-9 ",
    "title": "OCP: Open/Closed Principle:\nSoftware entities (classes, modules, functions, etc.) should be open for extension but closed for modification.",
    "content": [
      {
        "subTitle": "OCP: introduced by Bertrand Meyer",
        "subContent": [
          "In: Object-Oriented Software Construction (1997, 2nd ed.)"
        ]
      },
      {
        "subTitle": "Open for extension",
        "subContent": ["Changes can add new elements/behaviors"]
      },
      {
        "subTitle": "Closed for modification",
        "subContent": ["Changes should not modify existing elements/behaviors"]
      },
      {
        "subTitle": "Abstraction is key",
        "subContent": ["Abstract classes allow extension without modification"]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 31,
    "ppt": "Agile Design Principles-slide-10 ",
    "title": "OCP: Example (1)",
    "content": [
      {
        "subTitle": "OCP violated:",
        "subContent": [
          "Client class has reference to Server class",
          "If Server class replaced by different class,Client needs to be modified (name of new Server class)"
        ]
      },
      {
        "subTitle": "Therefore: Client is not closed to modification",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/31.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-11 ",
    "title": "OCP: Example (2)",
    "content": [
      {
        "subTitle": "Client references Client Interface",
        "subContent": ["Unaffected by change of Server class"]
      },
      {
        "subTitle": "Client is open to extensions and closed to modifications",
        "subContent": []
      },
      {
        "subTitle": "Client Interface rather than Server Interface",
        "subContent": [
          "Client depends on the interface it requires rather than the interface the Server provides\n",
          "If necessary use Adapter to bridge possible gap\""
        ]
      }
    ],
    "image": [
      {
        "url": "/32.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-12 ",
    "title": "OCP: Example (3) Template Method Pattern",
    "content": [
      {
        "subTitle": "Policy: Abstract base class",
        "subContent": ["Unaffected by change of Server class"]
      },
      {
        "subTitle": "Policy is open and closed",
        "subContent": []
      },
      {
        "subTitle": "Implementation extends Policy, doesn‚Äôt modify it",
        "subContent": [
          "Overrides abstract method(s), not concrete method(s) of Policy"
        ]
      }
    ],
    "image": [
      {
        "url": "/33.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-12 ",
    "title": "OCP: Example (4) ",
    "content": [
      {
        "subTitle": "DrawAllShapes()",
        "subContent": ["Conforms to OCP"]
      },
      {
        "subTitle": "Behavior can be extended without modification",
        "subContent": [
          "By adding more Shape implementing classes",
          "E.g. Triangle"
        ]
      }
    ],
    "image": [
      {
        "url": "/34.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-13 ",
    "title": "OCP: neither easy nor cheap ",
    "content": [
      {
        "subTitle": "OCP: neither easy nor cheap",
        "subContent": [
          "no particular abstraction is right for every kind of change"
        ]
      },
      {
        "subTitle": "Abstractions",
        "subContent": [
          "Not easy to find the right one",
          "Complicate the design",
          "Only justified if extensions actually happen (eventually)"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-15 ",
    "title": "LSP: Liskov Substitution Principle:\nSubtypes must be substitutable for their base types in all contexts.",
    "content": [
      {
        "subTitle": "Barbara Liskov, MIT, 1988",
        "subContent": [
          "\"S is a subtype of T if\n          for each object s of type S\n          there is an object t of type T\n          such that\n          for all programs P defined in terms of T\n          the behavior of P is unchanged if s is substituted for t\""
        ]
      },
      {
        "subTitle": "This notion of subtype is stronger than subclass",
        "subContent": ["Stronger means more restrictive"]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-16 ",
    "title": "LSP: Example (1)",
    "content": [
      {
        "subTitle": "Square is a subclass of Rectangle but not a subtype",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/35.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-17 ",
    "title": "LSP: Example (2)",
    "content": [
      {
        "subTitle": "Every square is a rectangl BUT:",
        "subContent": []
      },
      {
        "subTitle": "\"Not every (legal) state change for a rectangle\n        is a (legal) state change for a square\"",
        "subContent": [
          "In rectangles, the width and height can vary independently",
          "In squares, width must always equal the height"
        ]
      },
      {
        "subTitle": "Therefore: LSP violated",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/36.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-17 ",
    "title": "\"DIP: Dependency Inversion Principle:  \nA. High-level modules should not depend on low-level modules.\n    Both should depend on abstractions.\n    B. Abstractions should not depend upon details.\n    Details should depend upon abstractions.\"",
    "content": [
      {
        "subTitle": "High-level modules should not directly reference low-level modules",
        "subContent": []
      },
      {
        "subTitle": "\"Rather: low-level modules should support the interface\n        high-level modules require\"",
        "subContent": []
      },
      {
        "subTitle": "Makes high-level modules reusable in other contexts",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-18 ",
    "title": "DIP: Example ‚Äì Na√Øve Layers",
    "content": [
      {
        "subTitle": "Higher layers depend directly on lower layers",
        "subContent": [
          "i.e. methods in higher layers reference objects (of classes) defined in lower layers"
        ]
      },
      {
        "subTitle": "Makes each layer sensitive to changes to layers below",
        "subContent": ["Dependency possibly transitive"]
      }
    ],
    "image": [
      {
        "url": "/37.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-19 ",
    "title": "DIP: Dependency Inversion",
    "content": [
      {
        "subTitle": "Each lower layer depends on (required) interface of upper layer",
        "subContent": [
          "i.e. methods in higher layers reference objects (of classes) defined in lower layers"
        ]
      },
      {
        "subTitle": "Upper layer ‚Äúowns‚Äù interface",
        "subContent": [
          "\"Hollywood Principle:\n        ‚ÄúDon‚Äôt call us; we‚Äôll call you.‚Äù\""
        ]
      },
      {
        "subTitle": "Heuristic: Depend on abstractions",
        "subContent": [
          "Variables typed by interfaces not concrete classes",
          "Only subclass abstract classes",
          "Only override abstract methods"
        ]
      }
    ],
    "image": [
      {
        "url": "/38.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-20 ",
    "title": "DIP: Example (1)",
    "content": [
      {
        "subTitle": "Button depends directly on Lamp",
        "subContent": []
      },
      {
        "subTitle": "Can‚Äôt reuse Button in other contexts; e.g. coffee grinder",
        "subContent": []
      },
      {
        "subTitle": "Button class sensitive to changes of Lamp class",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/39.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-21 ",
    "title": "DIP: Example (2)",
    "content": [
      {
        "subTitle": "Button can now control device implementing ButtonServer interface",
        "subContent": []
      },
      {
        "subTitle": "Button no longer dependent on Lamp",
        "subContent": []
      },
      {
        "subTitle": "Button does not need to ‚Äúown‚Äù interface ButtonServer",
        "subContent": ["Could replace by more generic SwitchServer"]
      }
    ],
    "image": [
      {
        "url": "/40.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-23 ",
    "title": "ISP: Interface Segregation Principle: \nClients should not be forced to depend on methods they do not use.",
    "content": [
      {
        "subTitle": "Some objects need ‚Äúfat‚Äù, i.e., non-coherent interfaces.",
        "subContent": []
      },
      {
        "subTitle": "Clients should only need to know methods they need.",
        "subContent": []
      },
      {
        "subTitle": "Use abstract classes/interfaces",
        "subContent": [
          "Expose different slices of fat interface to different clients"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-25 ",
    "title": "ISP: Example ‚Äì Interface Pollution",
    "content": [
      {
        "subTitle": "Possible solution: force Door to implement Timer client",
        "subContent": [
          "Pollutes Door with TimerClient methods",
          "\n        Not every door has use for Timer"
        ]
      },
      {
        "subTitle": "Useless complexity (a design smell)",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/41.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-26 ",
    "title": "ISP: Separation through multiple inheritance",
    "content": [
      {
        "subTitle": "Timed Door has a ‚Äúfat‚Äù interface",
        "subContent": []
      },
      {
        "subTitle": "Timer Client and Door expose different slices of the Timed Door interface.",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/42.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Design Principles-slide-27 ",
    "title": "ISP: Separation through multiple inheritance",
    "content": [
      {
        "subTitle": "Door interface no longer polluted by Timer Client",
        "subContent": []
      },
      {
        "subTitle": "Door Timer Adapter adapts Timer Client Timeout to Timed Door time out method",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/43.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-3 ",
    "title": "Team Exercises",
    "content": [
      {
        "subTitle": "Acceptance Criteria",
        "subContent": []
      },
      {
        "subTitle": "Team working agreement(s)",
        "subContent": []
      },
      {
        "subTitle": "Definition of Done",
        "subContent": []
      },
      {
        "subTitle": "Coding Standard ",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-4 ",
    "title": "V-Model of Software Development",
    "content": [],
    "image": [
      {
        "url": "/44.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-5 ",
    "title": "Technical Practices",
    "content": [],
    "image": [
      {
        "url": "/45.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-6 ",
    "title": "Minimal Agile Toolkit",
    "content": [
      {
        "subTitle": "Project Wiki (or equivalent, e.g. Google Docs)",
        "subContent": []
      },
      {
        "subTitle": "Version Control System/Software repository (GitHub, ‚Ä¶)",
        "subContent": []
      },
      {
        "subTitle": "xUnit Framework",
        "subContent": []
      },
      {
        "subTitle": "Build automation/Continuous Integration",
        "subContent": []
      },
      {
        "subTitle": "Static Code Analysis",
        "subContent": [
          "Coding standard compliance",
          "Software quality measures",
          "Test coverage"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-7 ",
    "title": "Development Practices",
    "content": [
      {
        "subTitle": "Project Wiki (or equivalent, e.g. Google Docs)",
        "subContent": []
      },
      {
        "subTitle": "Acceptance tests",
        "subContent": ["Automate execution"]
      },
      {
        "subTitle": "Unit test ",
        "subContent": ["Automate execution"]
      },
      {
        "subTitle": "Write Clean Code",
        "subContent": []
      },
      {
        "subTitle": "Keep the design simple",
        "subContent": []
      },
      {
        "subTitle": "Grow code and tests in small increments",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-10 ",
    "title": "Unit Tests",
    "content": [
      {
        "subTitle": "Unit",
        "subContent": [
          "Elementary component",
          "E.g., functions, methods, classes"
        ]
      },
      {
        "subTitle": "Unit test ",
        "subContent": [
          "Collection of code",
          "When executed stimulates the unit",
          "E.g. calls method with certain input",
          "\"Verifies response\n E.g. output new state exception"
        ]
      },
      {
        "subTitle": "Unit testing",
        "subContent": [
          "Isolate the unit to be tested (eliminate/control dependencies)",
          "Execute and check small portions of functionality at a time"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-11 ",
    "title": "Legacy (Old School) Testing Feedback",
    "content": [],
    "image": [
      {
        "url": "/47.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-12 ",
    "title": "Agile Testing Feedback",
    "content": [],
    "image": [
      {
        "url": "/48.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-13 ",
    "title": "Legacy (Old School) Testing Feedback",
    "content": [],
    "image": [
      {
        "url": "/47.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-14 ",
    "title": "Test Automation Framework ",
    "content": [],
    "image": [
      {
        "url": "/49.png"
      },
      {
        "url": "/50.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-15 ",
    "title": "xUnit Framework (Technology) ",
    "content": [],
    "image": [
      {
        "url": "/51.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-16 ",
    "title": "xUnit Basics: JUnit",
    "content": [],
    "image": [
      {
        "url": "/52.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-17 ",
    "title": "System (Component, Unit) under test: Example",
    "content": [],
    "image": [
      {
        "url": "/53.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-19 ",
    "title": "Test Method",
    "content": [
      {
        "subTitle": "Four phases:",
        "subContent": [
          "set up fixture",
          "exercise the SUT",
          "verify expected behavior",
          "tear down fixture"
        ]
      }
    ],
    "image": [
      {
        "url": "/54.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-20 ",
    "title": "Naming Unit Tests",
    "content": [
      {
        "subTitle": "Your Coding Standard/Style Guide should specify a Unit Test naming convention",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/55.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-21 ",
    "title": "Four Phase Test -- In Line ",
    "content": [],
    "image": [
      {
        "url": "/56.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-22 ",
    "title": "Four-Phase Test ‚Äì Implicit Setup/Teardown ",
    "content": [
      {
        "subTitle": "\"Code for Setup and Teardown phase is factored out of individual tests;\n        the test runner executes the setup phase before and the teardown phase after each test method\n        \"",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/57.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-23 ",
    "title": "Assertion Method",
    "content": [],
    "image": [
      {
        "url": "/58.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-24 ",
    "title": "Assertion Method (Expected Exception)",
    "content": [],
    "image": [
      {
        "url": "/59.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-25 ",
    "title": "Running xUnit Tests",
    "content": [],
    "image": [
      {
        "url": "/60.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-26 ",
    "title": "Automated Unit Test Best Practices",
    "content": [],
    "image": [
      {
        "url": "/61.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-27 ",
    "title": "Automate Acceptance Tests",
    "content": [],
    "image": [
      {
        "url": "/62.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-28 ",
    "title": "The Role of Acceptance tests",
    "content": [
      {
        "subTitle": "PBI: ",
        "subContent": [
          "Product Backlog Item (i.e. (most frequently) a user story)"
        ]
      }
    ],
    "image": [
      {
        "url": "/63.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-29 ",
    "title": "Why automate Acceptance Tests",
    "content": [],
    "image": [
      {
        "url": "/64.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-30 ",
    "title": "Defining Acceptance Tests",
    "content": [],
    "image": [
      {
        "url": "/65.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-31 ",
    "title": "Acceptance Test is a ‚ÄúBlack Box‚Äù test",
    "content": [],
    "image": [
      {
        "url": "/66.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-32 ",
    "title": "Behavioral (‚ÄúBlack Box‚Äù) Testing Coverage",
    "content": [],
    "image": [
      {
        "url": "/67.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-33 ",
    "title": "Test Acceptance Criteria with Specific Examples",
    "content": [
      {
        "subTitle": "Specification by example:",
        "subContent": ["specific but not complete"]
      },
      {
        "subTitle": "Testing based on examples:",
        "subContent": [
          "samples behavior, no general assurance of correct behavior  "
        ]
      }
    ],
    "image": [
      {
        "url": "/68.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-34 ",
    "title": "Given-When-Then Format",
    "content": [],
    "image": [
      {
        "url": "/69.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-34 ",
    "title": "Behavior Driven Development",
    "content": [
      {
        "subTitle": "Focus on behavior:",
        "subContent": [
          "Acceptance criteria specify the behavior of the application expected by the customer"
        ]
      },
      {
        "subTitle": "Automate acceptance testing (checking of acceptance criteria) ",
        "subContent": [
          "Enable Product Owner (customer/user) to write acceptance test",
          "Automate translation and execution of acceptance tests"
        ]
      },
      {
        "subTitle": "‚ÄúLive‚Äù Specification of desired system behavior",
        "subContent": [
          "\"Automated acceptance tests keep acceptance criteria and actual system behavior from drifting apart\n          \""
        ]
      }
    ],
    "image": [
      {
        "url": "/70.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-34 ",
    "title": "Components of Acceptance Test Automation",
    "content": [],
    "image": [
      {
        "url": "/71.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Agile Development Practices-slide-34 ",
    "title": "Acceptance Test Frameworks",
    "content": [
      {
        "subTitle": "FitNesse.org",
        "subContent": []
      },
      {
        "subTitle": "Cucumber.io",
        "subContent": []
      },
      {
        "subTitle": "Specflow.org",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  }
]
