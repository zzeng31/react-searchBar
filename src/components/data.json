[
  {
    "id": 1,
    "ppt": "Unit Test Patterns-slide-3",
    "title": "Technical Practices",
    "content": [
      {
        "subTitle": "Unit Testing",
        "subContent": [
          "Agile: essential part of TDD",
          "General: testing of elementary components; performed by developers"
        ]
      }
    ],
    "image": [
      {
        "url": "/1.png"
      }
    ]
  },
  {
    "id": 2,
    "ppt": "Unit Test Patterns-slide-4",
    "title": "Test-Driven Development (TDD)",
    "content": [],
    "image": [
      {
        "url": "/2.png"
      }
    ]
  },
  {
    "id": 3,
    "ppt": "Unit Test Patterns-slide-5",
    "title": "Three Laws of TDD",
    "content": [],
    "image": [
      {
        "url": "/3.png"
      }
    ]
  },
  {
    "id": 4,
    "ppt": "Unit Test Patterns-slide-6",
    "title": "Desirable Test Characteristics (F.I.R.S.T.)",
    "content": [
      {
        "subTitle": "Fast",
        "subContent": [
          "tests will run frequently",
          "Small and simple: test one concept at a time"
        ]
      },
      {
        "subTitle": "Independent",
        "subContent": [
          "No dependencies between tests",
          "Tests can run in any order",
          "Simplifies failure analysis (debugging)"
        ]
      },
      {
        "subTitle": "Repeatable",
        "subContent": ["Tests can run at any time, in any order"]
      },
      {
        "subTitle": "Self-Validating",
        "subContent": ["Test either pass or fail (Boolean result)"]
      },
      {
        "subTitle": "Timely",
        "subContent": [
          "Write the tests when you need them",
          "In TDD: write test first, then code"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 5,
    "ppt": "Unit Test Patterns-slide-6",
    "title": "Clean Tests",
    "content": [
      {
        "subTitle": "Test code is code, too.",
        "subContent": []
      },
      {
        "subTitle": "Test code requires same care as production code",
        "subContent": [
          "Readable",
          "Understandable",
          "Self-explanatory; clear intent"
        ]
      },
      {
        "subTitle": "Dirty test code",
        "subContent": [
          "Same, or worse than, no tests",
          "Ill-structured tests increasingly harder to change and grow"
        ]
      }
    ],
    "image": []
  },
  {
    "id": 6,
    "ppt": "Unit Test Patterns-slide-6",
    "title": "Bigger Picture: Acceptance TDD",
    "content": [
      {
        "subTitle": "The code for passing the acceptance test is built incrementally based on several unit tests",
        "subContent": []
      },
      {
        "subTitle": "Acceptance TDD closely related to Behavior Driven Dev (BDD)",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/4.png"
      }
    ]
  },
  {
    "id": 7,
    "ppt": "Unit Test Patterns-slide-6",
    "title": "Need to isolate components for Unit testing",
    "content": [
      {
        "subTitle": "Testing clusters of components (e.g. classes) is hard",
        "subContent": [
          "many execution paths to cover",
          "Test data to drive specific paths may be hard to generate. E.g. may be hard to trigger exceptions"
        ]
      },
      {
        "subTitle": "Integration testing",
        "subContent": [
          "Testing clusters of components",
          "Attempt only with Unit tested components"
        ]
      },
      {
        "subTitle": "In Unit tests: need to:",
        "subContent": [
          "Control indirect inputs from depended-on components (DoCs) to SUT (software/system under test, the dependent component)",
          "Observe and verify indirect outputs from SUT to DoCs"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-6",
    "title": "What makes integration testing difficult",
    "content": [
      {
        "subTitle": "Long execution paths",
        "subContent": [
          "Through several service layers",
          "Each call to service represents a failure point"
        ]
      },
      {
        "subTitle": "Failure analysis non-trivial (complex)",
        "subContent": [
          "Not obvious where the failure occurred",
          "Layer",
          "Interaction between layers"
        ]
      }
    ],
    "image": [
      {
        "url": "/5.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-7",
    "title": "Sample Application: LogAnalyzer",
    "content": [
      {
        "subTitle": "SUT: IsValidFileName",
        "subContent": []
      },
      {
        "subTitle": "Has direct dependency on file system",
        "subContent": []
      },
      {
        "subTitle": "Not clear how to unit test",
        "subContent": ["Requires integration test"]
      },
      {
        "subTitle": "Test-inhibiting design",
        "subContent": [
          "Dependency on external resource may make tests fail even though SUT works correctly"
        ]
      },
      {
        "subTitle": "Solution",
        "subContent": [
          "Introduce abstraction layer",
          "Between SUT and external resource(s)"
        ]
      }
    ],
    "image": [
      {
        "url": "/6.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-7",
    "title": "Adding Abstraction Layer for Testability",
    "content": [
      {
        "subTitle": "FileExtensionManager",
        "subContent": ["Encapsulates access to file system"]
      },
      {
        "subTitle": "IsValidFileName",
        "subContent": [
          "No longer directly dependent on file system",
          "Now depends on (references) File Extension Manager object; therefore in subsequent step:"
        ]
      },
      {
        "subTitle": "Isolate IsValidFileName for unit testing",
        "subContent": [
          "Introduce ExtensionManager interface",
          "Replace FileExtensionManager by stub"
        ]
      }
    ],
    "image": [
      {
        "url": "/7.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-7",
    "title": "Encapsulate Filesystem access – Extract class",
    "content": [
      {
        "subTitle": "IsValidLogFileName still depends on concrete FileExtensionManager",
        "subContent": []
      },
      {
        "subTitle": "Remove this dependency by introducing ExtensionManager interface",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/8.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-8",
    "title": "Introduce interface to make DoC replaceable",
    "content": [
      {
        "subTitle": "ExtensionManager interface creates a seam",
        "subContent": []
      },
      {
        "subTitle": "Refactoring does not change functionality of code",
        "subContent": [
          "Keep the old version; confirm refactoring with regression tests"
        ]
      },
      {
        "subTitle": "For unit testing, replace FileExtensionManager (DoC) by StubExtensionManager",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/9.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-8",
    "title": "Introduce ExtensionManager Interface",
    "content": [
      {
        "subTitle": "any object that implements the ExtensionManager interface can serve as mgr",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/10.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-17",
    "title": "Define Extensionmanager Stub",
    "content": [
      {
        "subTitle": "ExtensionManager stub always returns true",
        "subContent": []
      },
      {
        "subTitle": "Still need to inject the stub (object) into the SUT",
        "subContent": []
      },
      {
        "subTitle": "Terminology:",
        "subContent": [
          "Osherove uses fake for an object that is a stub or a mock object",
          "Meszaros uses fake for “cheap” replacement of an “expensive” DoC with same functionality"
        ]
      }
    ],
    "image": [
      {
        "url": "/11.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-18",
    "title": "Dependency Injection: Stub or Mock into SUT",
    "content": [
      {
        "subTitle": "Constructor injection",
        "subContent": []
      },
      {
        "subTitle": "Setter injection",
        "subContent": []
      },
      {
        "subTitle": "Injection before method call",
        "subContent": []
      },
      {
        "subTitle": "Extract and Override",
        "subContent": []
      },
      {
        "subTitle": "Parameter injection",
        "subContent": [
          "Pass DoC to method under test as parameter to method call"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-19",
    "title": "Constructor Injection",
    "content": [
      {
        "subTitle": "Constructor of object on which method under test is called takes DoC as parameter",
        "subContent": []
      },
      {
        "subTitle": "DoC is provided to SUT by the client(i.e. component that calls the SUT)",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/12.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-20",
    "title": "Constructor Injection: Example",
    "content": [
      {
        "subTitle": "When creating a LogAnalyzer object, an Extensionmanager must be provided to the constructor",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/13.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-21",
    "title": "Setter Injection",
    "content": [
      {
        "subTitle": "Use property setter to configure object under test with suitable DoC, stub, or mock object",
        "subContent": []
      },
      {
        "subTitle": "\"Preferable to constructor injection when SUT has multiple possible\n        dependencies not all of which may be needed in all contexts (by all tests)\"",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/15.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-22",
    "title": "Setter Injection: Example",
    "content": [
      {
        "subTitle": "LogAnalyzer constructor initializes manager attribute to DoC",
        "subContent": []
      },
      {
        "subTitle": "Test setup sets ExtensionManager to stub",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/16.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-23",
    "title": "Dependency Injection using Factory",
    "content": [
      {
        "subTitle": "ClassUnderTest remains untouched by test setup",
        "subContent": []
      },
      {
        "subTitle": "Test setup manipulates FactoryClass to inject test stub",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/17.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-25",
    "title": "Dependency Injection using Factory Example (1)",
    "content": [
      {
        "subTitle": "LogAnalyzer constructor calls Factory method to supply ExtensionManager",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/18.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-27",
    "title": "Interaction Testing Using Mock Objects",
    "content": [
      {
        "subTitle": "Interaction Testing",
        "subContent": [
          "Testing indirect outputs",
          "Calls to DoCs",
          "Effects not visible in SUT"
        ]
      },
      {
        "subTitle": "Mock objects",
        "subContent": [
          "Doubles for DoCs",
          "Perform test verification by comparing actual with expected behavior (i.e. calls from SUT)",
          "Usually only one Mock object per test Otherwise test may be doing too much"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-28",
    "title": "Stubs vs. Mocks",
    "content": [
      {
        "subTitle": "Stubs",
        "subContent": [
          "Stubs control and supply indirect inputs",
          "Verification uses interface of class under test (to access results/state)"
        ]
      },
      {
        "subTitle": "Mocks",
        "subContent": [
          "Spies/Mocks observe and record indirect outputs",
          "Verification uses mock interface (to access interaction data)"
        ]
      }
    ],
    "image": [
      {
        "url": "/19.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-28",
    "title": "Test Spy: Example (1)",
    "content": [],
    "image": [
      {
        "url": "/20.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-29",
    "title": "Test Spy: Example (2)",
    "content": [],
    "image": [
      {
        "url": "/21.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-29",
    "title": "Using Mock and Stub together",
    "content": [
      {
        "subTitle": "LogAnalyzer has two dependencies",
        "subContent": [
          "When LogError fails, WebService throws an exception,and LogAnalyzer sends email msg."
        ]
      },
      {
        "subTitle": "To test interaction:",
        "subContent": [
          "Stub for WebService provides exception",
          "Mock for EmailService monitors SendEmail interaction"
        ]
      }
    ],
    "image": [
      {
        "url": "/22.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-35",
    "title": "Testbed construction",
    "content": [
      {
        "subTitle": "Objects collaborate with other objects in an application",
        "subContent": []
      },
      {
        "subTitle": "Objects collaborate with other objects in an application",
        "subContent": []
      },
      {
        "subTitle": "How can we test individual objects/properties in isolation",
        "subContent": [
          "Exactly what is to be tested?",
          "What potential problems are the tests to address?"
        ]
      },
      {
        "subTitle": "How can we construct tests that get around the dependencies?",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-35",
    "title": "(Test) Helpers",
    "content": [
      {
        "subTitle": "Use (Test) Doubles as approximations when there are dependencies on classes that",
        "subContent": [
          "are not implemented yet",
          "Inefficient/expensive to use",
          "Difficult to observe"
        ]
      },
      {
        "subTitle": "Doubles as stand-ins for still missing implementations",
        "subContent": [
          "Top-down or Outside-In development",
          "Use doubles to stand in for not yet developed DoCs: DoC: depended-on component\n          Allows for decoupling time order of development from dependency ordering.",
          "Integrate as DoCs become available"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-37",
    "title": "Types of Test Doubles (Meszaros)",
    "content": [
      {
        "subTitle": "Test Stub",
        "subContent": ["Supplies and controls indirect inputs to SUT"]
      },
      {
        "subTitle": "Test Spy",
        "subContent": [
          "Observes and records data sent to Depended-on Components(DoC) i.e. indirect outputs",
          "Provides retrieval interface for test verification (assertion methods)"
        ]
      },
      {
        "subTitle": "Mock Object",
        "subContent": [
          "Compares actual invocation of DoC with expected invocation during SUT execution, i.e. incrementally compares actual indirect outputs (from SUT) with expected indirect outputs"
        ]
      },
      {
        "subTitle": "Fake objects",
        "subContent": [
          "“knock-offs” of DoC with same functionality but more efficient",
          "E.g. hash table instead of relational DB"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-37",
    "title": "Example: Double (1)",
    "content": [
      {
        "subTitle": "System-wide log service",
        "subContent": []
      },
      {
        "subTitle": "log(loglevel, msg) records messages msg with loglevel priority",
        "subContent": []
      },
      {
        "subTitle": "log(msg) records messages msg with loglevel 2",
        "subContent": []
      },
      {
        "subTitle": "Fake objects",
        "subContent": [
          "“knock-offs” of DoC with same functionality but more efficient",
          "E.g. hash table instead of relational DB"
        ]
      }
    ],
    "image": [
      {
        "url": "/23.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-39",
    "title": "Example: Double (2)",
    "content": [
      {
        "subTitle": "Problem: Where is the log being kept?",
        "subContent": [
          "Initially file system may be sufficient",
          "Relational DB may come later",
          "Either option not ideal for testing LogServer"
        ]
      },
      {
        "subTitle": "Solution:",
        "subContent": ["hide log repository behind Logger interface"]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-39",
    "title": "Example: Double (3)",
    "content": [
      {
        "subTitle": "Problem: Where is the log being kept?",
        "subContent": [
          "Initially file system may be sufficient",
          "Relational DB may come later",
          "Either option not ideal for testing LogServer"
        ]
      },
      {
        "subTitle": "Solution:",
        "subContent": ["hide log repository behind Logger interface"]
      }
    ],
    "image": [
      {
        "url": "/24.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-39",
    "title": "Example: Double (4)",
    "content": [
      {
        "subTitle": "Most important Logger property is now explicit:",
        "subContent": ["Log is recorded line by line"]
      },
      {
        "subTitle": "Target repository hidden behind interface:",
        "subContent": ["DBLogger, FileLogger"]
      },
      {
        "subTitle": "LogServer object references instance of object implementing Logger interface.",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-42",
    "title": "Example: Double (5)",
    "content": [],
    "image": [
      {
        "url": "/25.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-45",
    "title": "Example: Double (7) – Test Spy",
    "content": [
      {
        "subTitle": "LogServer code is independent of specific log repository",
        "subContent": ["Only depends on interface"]
      },
      {
        "subTitle": "Logger interface used for testing",
        "subContent": ["Dependency injection (via constructor) at runtime"]
      },
      {
        "subTitle": "Testing of LogServer without exposing Logger implementation",
        "subContent": []
      },
      {
        "subTitle": "What can still be improved?",
        "subContent": [
          "migrate test verification to double",
          "Instead of test spy use mockobject",
          "In example: LoggerMockobject"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-45",
    "title": "Example: Mock object (4)",
    "content": [
      {
        "subTitle": "The Mockobject",
        "subContent": [
          "provides for each input a setExpected method;addExpected to accommodate multiple calls",
          "Configuration interface"
        ]
      },
      {
        "subTitle": "Contains the test code in verify",
        "subContent": []
      },
      {
        "subTitle": "Checks parameters and the order of method calls",
        "subContent": []
      },
      {
        "subTitle": "Not the mock object is being tested but the use of it by the SUT",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-50",
    "title": "Test Double Flavors",
    "content": [
      {
        "subTitle": "Dummy Object",
        "subContent": ["Type-correct value needed by SUT but never used"]
      },
      {
        "subTitle": "Fake Object",
        "subContent": [
          "Functionally equivalent replacement of DoC",
          "Cheaper faster simpler; local",
          "Often not scalable",
          "E.g. hashtable faking relational DB"
        ]
      },
      {
        "subTitle": "Test Stub",
        "subContent": ["Control point for indirect inputs"]
      },
      {
        "subTitle": "Test Spy",
        "subContent": ["Observation point for indirect outputs"]
      },
      {
        "subTitle": "Mock Object",
        "subContent": ["Observes and verifies indirect outputs"]
      },
      {
        "subTitle": "Configurable (typical case) or hard-coded",
        "subContent": []
      }
    ],
    "image": [
      {
        "url": "/26.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-51",
    "title": "Test Double Flavors (Meszaros) (again)",
    "content": [
      {
        "subTitle": "Test Stub",
        "subContent": ["Supplies indirect inputs to SUT"]
      },
      {
        "subTitle": "Test Spy",
        "subContent": [
          "Observes and records data sent to Depended-on Components (DoC)i.e. indirect outputs",
          "Provides retrieval interface for test verification(assertion methods)"
        ]
      },
      {
        "subTitle": "Mock Object",
        "subContent": [
          "Compares actual invocation of DoC with expected invocation during SUT execution, i.e. incrementally compares actual indirect outputs (from SUT) with expected indirect outputs"
        ]
      },
      {
        "subTitle": "Fake objects",
        "subContent": [
          "“knock-offs” of DoC with same functionality but more efficient",
          "E.g. hash table instead of relational DB"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-52",
    "title": "Indirect Inputs",
    "content": [
      {
        "subTitle": "Indirect inputs",
        "subContent": [
          "Return values",
          "Updated parameters/state",
          "exceptions"
        ]
      },
      {
        "subTitle": "Control point",
        "subContent": [
          "Point of injecting an indirect input into execution of SUT",
          "Allows testing of execution paths requiring specific conditions Including exception handling paths"
        ]
      }
    ],
    "image": [
      {
        "url": "/27.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-53",
    "title": "Indirect Output",
    "content": [
      {
        "subTitle": "Indirect Outputs",
        "subContent": [
          "Effect of calling DoC may not be visible to SUT",
          "Output may be sent to other components",
          "E.g.writing to log; sending email; storing in DB"
        ]
      },
      {
        "subTitle": "Observation Point",
        "subContent": [
          "Means of seeing/accessing indirect outputs",
          "Used in indirect output test assertions (to determine whether test passed or failed)"
        ]
      }
    ],
    "image": [
      {
        "url": "/28.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-54",
    "title": "Controlling indirect inputs: Back Door Setup",
    "content": [
      {
        "subTitle": "Back Door Setup",
        "subContent": [
          "Configure DoC in test set up to produce specific response",
          "E.g. load data into DB so data look up will produce desired number of values (no item found, one item found, >1 items found)",
          "DoC itself serves as control point in Back Door Setup"
        ]
      },
      {
        "subTitle": "Back Door Setup",
        "subContent": [
          "Not practical when manipulation ofDoC Is expensive Has undesired side effects",
          "Not possible when DoC Cannot be manipulated for desired effect, Does not exist yet"
        ]
      }
    ],
    "image": [
      {
        "url": "/29.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-55",
    "title": "Test Stub as Control Point for Indirect Inputs",
    "content": [
      {
        "subTitle": "Test Stub",
        "subContent": ["DoC double", "Control point of indirect inputs"]
      },
      {
        "subTitle": "Setup phase",
        "subContent": [
          "Create Test Stub object",
          "Configure to return desired values to SUT",
          "Install Test Stub object into SUT"
        ]
      },
      {
        "subTitle": "Exercise phase",
        "subContent": ["Test Stub handles all calls to DoC"]
      }
    ],
    "image": [
      {
        "url": "/30.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-56",
    "title": "Behavior (Indirect Output) Verification",
    "content": [
      {
        "subTitle": "To verify indirect outputs",
        "subContent": [
          "Need to observe calls of SUT to API of DoC",
          "May also need to supply indirect inputs"
        ]
      },
      {
        "subTitle": "Back Door Verification",
        "subContent": [
          "use DoC (production version) as observation point when DoC allows suitable queries, e.g.",
          "Check file written with expected contents",
          "Query DB for expected contents"
        ]
      },
      {
        "subTitle": "Not possible or practical when",
        "subContent": [
          "Suitable DoC queries not possible, too expensive, or unacceptable side effects",
          "DoC not available for use"
        ]
      }
    ],
    "image": [
      {
        "url": "/31.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-57",
    "title": "Test Spy for Procedural Behavior Verification",
    "content": [
      {
        "subTitle": "Test Spy",
        "subContent": [
          "Records indirect outputs from SUT",
          "Implements DoC interface",
          "Implements retrieval interface for use by test method during Verify phase"
        ]
      },
      {
        "subTitle": "Setup phase",
        "subContent": [
          "Create Test Spy object",
          "Install Test Spy object in SUT (instead of production DoC)"
        ]
      },
      {
        "subTitle": "Not possible or practical when",
        "subContent": [
          "Suitable DoC queries not possible, too expensive, or unacceptable side effects",
          "DoC not available for use"
        ]
      }
    ],
    "image": [
      {
        "url": "/31.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-58",
    "title": "Mock Objects with Expected Behavior for Indirect Output Verification",
    "content": [
      {
        "subTitle": "Mock Object",
        "subContent": [
          "Configured with expected use by SUT",
          "Implements DoC interface",
          "Compares actual use with expected use during SUT execution",
          "Implements final verification method E.g. to check that all expected calls were received"
        ]
      },
      {
        "subTitle": "Setup",
        "subContent": [
          "Create Mock object",
          "Configured with expected use by SUT",
          "Install in SUT"
        ]
      },
      {
        "subTitle": "Exercise",
        "subContent": [
          "Mock object verifies each call from SUT",
          "Fails test when first call fails to verify"
        ]
      },
      {
        "subTitle": "Verify",
        "subContent": ["Mock object performs final verification"]
      }
    ],
    "image": [
      {
        "url": "/32.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-59",
    "title": "Providing the Test Double",
    "content": [
      {
        "subTitle": "Hand-built test doubles",
        "subContent": [
          "Hardcoded, or",
          "Configurable",
          "Simplify using pseudo objects"
        ]
      },
      {
        "subTitle": "Generated test doubles",
        "subContent": [
          "Always configurable",
          "Dynamically generated Jmock toolkit",
          "Statically generated EasyMock toolkit Compiled just like hand-built doubles"
        ]
      },
      {
        "subTitle": "Hand-built inner test stub",
        "subContent": ["Hardcoded", "Defined within test method"]
      }
    ],
    "image": [
      {
        "url": "/33.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-60",
    "title": "Configuring Test Doubles",
    "content": [
      {
        "subTitle": "Test stubs",
        "subContent": ["Define return values"]
      },
      {
        "subTitle": "Mock objects",
        "subContent": ["Define expected interactions"]
      },
      {
        "subTitle": "Hard-coded doubles",
        "subContent": ["Values/expected interactions defined at design time"]
      },
      {
        "subTitle": "Configurable doubles",
        "subContent": [
          "Values/expected interactions defined at runtime by test method"
        ]
      },
      {
        "subTitle": "Configurable doubles",
        "subContent": [
          "Provide configuration interface E.g. attribute setters",
          "Reusable across tests",
          "Make tests more understandable\n        Configuration data visible in test method",
          "Configuration takes place in setup phase"
        ]
      }
    ],
    "image": [
      {
        "url": "/34.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-61",
    "title": "Installing the Test Double",
    "content": [
      {
        "subTitle": "Installing the test double",
        "subContent": [
          "Connecting the SUT to the test double (instead of the production DoC)"
        ]
      },
      {
        "subTitle": "Installation options",
        "subContent": [
          "Dependency Injection: Client passes DoC to dependent object "
        ]
      },
      {
        "subTitle": "Dependency Lookup",
        "subContent": [
          "Construction/Selection of DoC delegated to another object"
        ]
      },
      {
        "subTitle": "Test hook",
        "subContent": ["Conditional call to components within SUT"]
      },
      {
        "subTitle": "Inversion of Control frameworks",
        "subContent": [
          "Language specific",
          "Automate substitution of dependencies"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-62",
    "title": "Dependency Injection",
    "content": [
      {
        "subTitle": "SUT not “aware” of specific DoC",
        "subContent": [
          "Only of interface",
          "Good design practice",
          "Parameterizes SUT on DoC",
          "Makes SUT (re)usable in other contexts",
          "Frequently used in TDD"
        ]
      },
      {
        "subTitle": "Dependency Injection Flavors",
        "subContent": []
      },
      {
        "subTitle": "Constructor injection",
        "subContent": [
          "DoC passed to constructor method",
          "Stored in private attribute"
        ]
      },
      {
        "subTitle": "Setter injection",
        "subContent": [
          "DoC passed to setter method",
          "Double object may replace real DoC"
        ]
      },
      {
        "subTitle": "Parameter injection",
        "subContent": ["DoC passed to SUT method"]
      }
    ],
    "image": [
      {
        "url": "/35.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-63",
    "title": "Dependency Lookup",
    "content": [
      {
        "subTitle": "Dependency Lookup",
        "subContent": [
          "SUT acquires DoC via Object Factory or Service Locator (Registry)",
          "Configuration of Factory or Registry During Setup phase controls which DoC the SUT uses"
        ]
      },
      {
        "subTitle": "Object Factory (GoF)",
        "subContent": [
          "SUT acquires DoC by calling Factory method",
          "Factory method creates DoC"
        ]
      },
      {
        "subTitle": "Service Locator (Registry)",
        "subContent": [
          "SUT asks Service Locator for DoC",
          "Service Locator provides already created DoC"
        ]
      }
    ],
    "image": [
      {
        "url": "/36.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-64",
    "title": "Retrofitting Testability: Test-specific Subclass of SUT",
    "content": [
      {
        "subTitle": "SUT",
        "subContent": [
          "Encapsulate DoC access in internal method",
          "\"Clean Code:\n          intention revealing abstractions;\n          single-purpose functions/methods\""
        ]
      },
      {
        "subTitle": "SUT subclass",
        "subContent": [
          "Add methods to access private state",
          "Inject dependency on test double\n          by overriding DoC access methods"
        ]
      },
      {
        "subTitle": "Drawback",
        "subContent": [
          "\"Subclass may accidently modify\n          behavior to be tested\""
        ]
      }
    ],
    "image": [
      {
        "url": "/37.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-65",
    "title": "Retrofitting Testability: Test-specific subclass of DoC",
    "content": [
      {
        "subTitle": "Create Test Double as subclass of Doc",
        "subContent": [
          "Override some or all methods used by SUT",
          "Provide indirect inputs",
          "Monitor indirect outputs"
        ]
      },
      {
        "subTitle": "Safer than subclassing SUT",
        "subContent": ["Avoids modifying SUT behavior being tested"]
      }
    ],
    "image": [
      {
        "url": "/38.png"
      }
    ]
  },
  {
    "id": 8,
    "ppt": "Unit Test Patterns-slide-64",
    "title": "Retrofitting Testability: Test hooks",
    "content": [
      {
        "subTitle": "Test hooks",
        "subContent": [
          "Conditional use of Test Doubles",
          "Not mentioned in polite Agile society",
          "Intermingles test code with production code"
        ]
      },
      {
        "subTitle": "Legitimate way to make legacy code testable",
        "subContent": [
          "Transition strategy",
          "Enables tests without large-scale refactoring",
          "After refactoring for testability test hooks can be removed"
        ]
      }
    ],
    "image": [
      {
        "url": ""
      }
    ]
  }
]
